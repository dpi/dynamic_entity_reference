<?php

/**
 * @file
 * Contains tests for the module.
 */


/**
 * Ensures that Dynamic Entity References field works correctly.
 */
class DynamicEntityReferenceTest extends DrupalWebTestCase {

  /**
   * Profile to use.
   */
  protected $profile = 'testing';

  /**
   * Admin user
   *
   * @var \StdClass
   */
  protected $adminUser;

  /**
   * Modules to enable.
   *
   * @var array
   */
  public static $modules = array(
    'entityreference',
    'entity',
    'field_ui',
    'dynamic_entity_reference',
    'field_test',
    'node',
  );

  public static function getInfo() {
    return array(
      'name' => 'Dynamic Entity Reference',
      'description' => 'Test dynamic entity reference functionality.',
      'group' => 'Dynamic Entity Reference',
    );
  }

  /**
   * Permissions to grant admin user.
   *
   * @var array
   */
  protected $permissions = array(
    'access administration pages',
    'access field_test content',
    'administer field_test content',
    'administer content types',
  );

  /**
   * Sets up the test.
   */
  protected function setUp() {
    parent::setUp(self::$modules);
    $this->adminUser = $this->drupalCreateUser($this->permissions);
    $this->drupalCreateContentType(array('type' => 'ponies'));
  }

  /**
   * Tests field settings of dynamic entity reference field.
   */
  public function testFieldSettings() {
    $this->drupalLogin($this->adminUser);
    // Add a new dynamic entity reference field.
    $this->drupalGet('admin/structure/types/manage/ponies/fields');
    $edit = array(
      'fields[_add_new_field][label]' => 'Foobar',
      'fields[_add_new_field][field_name]' => 'foobar',
      'fields[_add_new_field][type]' => 'dynamic_entity_reference',
    );
    $this->drupalPost(NULL, $edit, t('Save'));
    $this->drupalPost(NULL, array(
      'field[cardinality]' => '-1',
      'field[settings][entity_type_ids][]' => 'user',
    ), t('Save field settings'));
    $this->assertFieldByName('default_value_input[field_foobar][0][target_type]');
    $this->assertFieldByXPath("descendant-or-self::select[@name = 'default_value_input[field_foobar][0][target_type]']/option[@value = 'entity_test']", 'field_test');
    $this->assertNoFieldByXPath("descendant-or-self::select[@name = 'default_value_input[field_foobar][0][target_type]']/option[@value = 'user']", 'user');
    $this->drupalPost(NULL, array(), t('Save settings'));
    $this->assertRaw(t('Saved %name configuration', array('%name' => 'Foobar')));
    $field = field_info_field('field_foobar');
    $excluded_entity_type_ids = $field['settings']['entity_type_ids'];
    $this->assertNotNull($excluded_entity_type_ids);
    $this->assertIdentical(array_keys($excluded_entity_type_ids), array('user'));
    // Check the include entity settings.
    $this->drupalGet('admin/structure/types/manage/ponies/fields/field_foobar');
    $this->drupalPost(NULL, array(
      'field[cardinality]' => '-1',
      'field[settings][exclude_entity_types]' => FALSE,
      'field[settings][entity_type_ids][]' => 'user',
    ), t('Save field settings'));
    $this->drupalGet('admin/structure/types/manage/ponies/fields/field_foobar');
    $this->assertFieldByName('default_value_input[field_foobar][0][target_type]');
    $this->assertFieldByXPath("descendant-or-self::select[@name = 'default_value_input[field_foobar][0][target_type]']/option[@value = 'user']", 'user');
    $this->assertNoFieldByXPath("descendant-or-self::select[@name = 'default_value_input[field_foobar][0][target_type]']/option[@value = 'entity_test']", 'entity_test');
    $this->drupalPost(NULL, array(), t('Save settings'));
    $this->assertRaw(t('Saved %name configuration', array('%name' => 'Foobar')));
    $field = field_info_field('field_foobar');
    $excluded_entity_type_ids = $field['settings']['entity_type_ids'];
    $this->assertNotNull($excluded_entity_type_ids);
    $this->assertIdentical(array_keys($excluded_entity_type_ids), array('user'));
  }

  /**
   * Tests adding and editing values using dynamic entity reference.
   */
  public function testDynamicEntityReference() {
    $this->drupalLogin($this->adminUser);
    // Add a new dynamic entity reference field.
    $this->drupalGet('admin/structure/types/manage/ponies/fields');
    $edit = array(
      'fields[_add_new_field][label]' => 'Foobar',
      'fields[_add_new_field][field_name]' => 'foobar',
      'fields[_add_new_field][type]' => 'dynamic_entity_reference',
    );
    $this->drupalPost(NULL, $edit, t('Save'));
    $this->drupalPost(NULL, array(
      'field[cardinality]' => '-1',
    ), t('Save field settings'));

    $this->drupalPost(NULL, array(), t('Save settings'));
    $this->assertRaw(t('Saved %name configuration', array('%name' => 'Foobar')));

    // Create some items to reference.
    $item1 = entity_create('field_test', array(
      'name' => 'item1',
    ));
    $item1->save();
    $item2 = entity_create('field_test', array(
      'name' => 'item2',
    ));
    $item2->save();

    // Test the new entity commenting inherits default.
    $this->drupalGet('test-entity/add/test-bundle');
    $this->assertField('field_foobar[0][target_id]', 'Found foobar field target id');
    $this->assertField('field_foobar[0][target_type]', 'Found foobar field target type');

    // Add some extra dynamic entity reference fields.
    $this->drupalPostAjax(NULL, array(), array('field_foobar_add_more' => t('Add another item')), 'system/ajax', array(), array(), 'field-test-form');
    $this->drupalPostAjax(NULL, array(), array('field_foobar_add_more' => t('Add another item')), 'system/ajax', array(), array(), 'field-test-form');

    $edit = array(
      'field_foobar[0][target_id]' => $this->adminUser->name . ' (' . $this->adminUser->uid . ')',
      'field_foobar[0][target_type]' => 'user',
      'field_foobar[1][target_id]' => 'item1 (' . $item1->id() . ')',
      'field_foobar[1][target_type]' => 'entity_test',
      'field_foobar[2][target_id]' => 'item2 (' . $item2->id() . ')',
      'field_foobar[2][target_type]' => 'entity_test',
      'title' => 'Barfoo',
      'name' => $this->adminUser->name,
    );

    $this->drupalPost(NULL, $edit, t('Save'));
    $entities = entity_load('node', FALSE, array(
      'title' => 'Barfoo',
    ));
    $this->assertEqual(1, count($entities), 'Entity was saved');
    $node = reset($entities);
    $this->drupalGet('node/' . $node->nid);
    $this->assertText('Barfoo');
    $this->assertText($this->adminUser->name);
    $this->assertText('item1');
    $this->assertText('item2');

    $this->assertEqual(count($node->field_foobar[LANGUAGE_NONE]), 3, 'Three items in field');
    $wrapper = entity_metadata_wrapper('node', $node);
    $this->assertEqual($wrapper->field_foobar[0]->entity->label(), $this->adminUser->name);
    $this->assertEqual($wrapper->field_foobar[1]->entity->label(), 'item1');
    $this->assertEqual($wrapper->field_foobar[2]->entity->label(), 'item2');

    $this->drupalGet('node/' . $node->nid . '/edit');
    $edit = array(
      'name' => 'Bazbar',
      // Remove one child.
      'field_foobar[2][target_id]' => '',
    );
    $this->drupalPost(NULL, $edit, t('Save'));
    $this->drupalGet('entity_test/' . $node->nid);
    $this->assertText('Bazbar');
    // Reload entity.
    $node = entity_load('entity_test', $node->nid, array(), TRUE);
    $this->assertEqual(count($node->field_foobar[LANGUAGE_NONE]), 2, 'Two values in field');
  }

}
